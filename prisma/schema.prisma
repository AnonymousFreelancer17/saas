generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

enum UserRole {
  CLIENT
  HR
  ENGINEER
  PROJECT_MANAGER
  TECH_LEAD
  DESIGNER
  ADMIN
  SUPERADMIN
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  REVIEW
  BLOCKED
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IssueType {
  TASK
  STORY
  BUG
  EPIC
  SUBTASK
}

model User {
  id                    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId               String         @unique
  email                 String         @unique
  password              String?
  name                  String
  role                  UserRole       @default(CLIENT)
  profileImage          String?
  teams                 TeamMember[]
  createdIssues         Issue[]        @relation("CreatedIssues")
  assignedIssues        Issue[]        @relation("AssignedIssues")
  comments              Comment[]
  watchedIssues         WatchedIssue[]
  activityLogs          ActivityLog[]
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  sentNotifications     Notification[] @relation("SentNotifications")
  subscription          Boolean?       @default(false)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  members     TeamMember[]
  projects    Project[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TeamMember {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   String
  role     String // Can use enum if roles are fixed
  joinedAt DateTime @default(now())

  @@unique([userId, teamId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  boards      Board[]
  issues      Issue[]
  sprints     Sprint[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Board {
  id        String   @id @default(cuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sprint {
  id        String   @id @default(cuid())
  name      String
  goal      String?
  startDate DateTime
  endDate   DateTime
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id          String        @id @default(cuid())
  title       String
  description String?
  type        IssueType     @default(TASK)
  status      IssueStatus   @default(TODO)
  priority    IssuePriority @default(MEDIUM)

  creator   User   @relation("CreatedIssues", fields: [creatorId], references: [id])
  creatorId String

  assignee   User?   @relation("AssignedIssues", fields: [assigneeId], references: [id])
  assigneeId String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  board   Board?  @relation(fields: [boardId], references: [id])
  boardId String?

  sprint   Sprint? @relation(fields: [sprintId], references: [id])
  sprintId String?

  parent   Issue?  @relation("Subtasks", fields: [parentId], references: [id])
  parentId String?
  subtasks Issue[] @relation("Subtasks")

  labels       Label[]        @relation("IssueLabels")
  attachments  Attachment[]
  comments     Comment[]
  watchers     WatchedIssue[]
  activityLogs ActivityLog[]
  dueDate      DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Label {
  id     String  @id @default(cuid())
  name   String  @unique
  issues Issue[] @relation("IssueLabels")
}

model Attachment {
  id         String   @id @default(cuid())
  url        String
  filename   String
  issue      Issue    @relation(fields: [issueId], references: [id])
  issueId    String
  uploadedAt DateTime @default(now())
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String // e.g., "STATUS_CHANGED", "COMMENT_ADDED"
  details   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   String
  createdAt DateTime @default(now())
}

model WatchedIssue {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  issue   Issue  @relation(fields: [issueId], references: [id])
  issueId String

  @@unique([userId, issueId])
}

model Notification {
  id          String   @id @default(cuid())
  type        String
  message     String
  read        Boolean  @default(false)
  link        String?
  recipient   User     @relation("ReceivedNotifications", fields: [recipientId], references: [id])
  recipientId String
  sender      User?    @relation("SentNotifications", fields: [senderId], references: [id])
  senderId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
